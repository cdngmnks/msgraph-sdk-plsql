services:
  - docker

before_install:
  - cd
  - git clone https://github.com/oracle/docker-images.git
  - cd ./docker-images/OracleDatabase/SingleInstance/dockerfiles/18.4.0
  - docker build -t oracle/database:18.4.0-xe -f Dockerfile.xe .
  - cd
  - mkdir scripts
  - cd ./scripts
  - cp /home/travis/build/cdngmnks/msgraph-sdk-plsql/src/msgraph_sdk.pks .
  - cp /home/travis/build/cdngmnks/msgraph-sdk-plsql/src/msgraph_sdk.pkb .
  - curl -LOk $(curl --silent https://api.github.com/repos/utPLSQL/utPLSQL/releases/latest | awk '/browser_download_url/ { print $2 }' | grep ".zip\"" | sed 's/"//g') 
  - unzip -q utPLSQL.zip
  - echo "ALTER SESSION SET CONTAINER = XEPDB1;" >> 01_utplsql.sql
  - echo "@/opt/oracle/scripts/setup/utPLSQL/source/install_headless.sql" >> 01_utplsql.sql
  - echo "ALTER SESSION SET CONTAINER = XEPDB1;" >> 02_demo_user.sql
  - echo "create user demo identified by "demo" default tablespace users quota unlimited on users;" >> 02_demo_user.sql
  - echo "grant create session, create sequence, create procedure, create type, create table, create view, create synonym to demo;" >> 02_demo_user.sql
  - echo "set define off;" >> 03_msgraph_sdk.sql
  - echo "ALTER SESSION SET CONTAINER = XEPDB1;" >> 03_msgraph_sdk.sql
  - echo "ALTER SESSION SET CUTTENT_SCHEMA = DEMO;" >> 03_msgraph_sdk.sql
  - echo "@/opt/oracle/scripts/setup/msgraph_sdk.pks" >> 03_msgraph_sdk.sql
  - echo "@/opt/oracle/scripts/setup/msgraph_sdk.pkb" >> 03_msgraph.sdk.sql
#  - docker run -d --name oracle-xe -p 1521:1521 -p 5500:5500 -e ORACLE_PWD=secret -v /home/travis/scripts:/opt/oracle/scripts/setup oracle/database:18.4.0-xe
  - docker run --name oracle-xe -p 1521:1521 -p 5500:5500 -e ORACLE_PWD=secret -v /home/travis/scripts:/opt/oracle/scripts/setup oracle/database:18.4.0-xe
  - docker ps -a

#addons:
#  sonarcloud:
#    organization: "cdngmnks"
#    token:
#      secure: "V5STPBe5Zy8xFXxPu68qrtkhiRwWx0+KmYLLWwleU2A/lJOe810xUin53uDfE26XVHO4ReyzPP7DzCwHPX/eDzfYl01qhCaeHgBdaiOnEEc7NKum5jeJh5pLyVOGUxcnlWtxq11X1lSvk7vpOGkl1ipssiot5jHi3HOb+jBobwornYDp1CKrM34qpdacPZKqBh0+5UddXC3KTsOMnkb/Yoklie3KskTreQtKpV6KMEl7MMaU0jrk+9OrhiRNyrptGKxwYXua7U2Rrpv6WwxXGT1VM8LAeTaBhZR2XMDMtllyuHs3LFR0100JIoH+XsH4lE2UpqAuwKLMEBprSFwWj49Dqf+IOItCT8JZ3ay4WpNo2Id3VQzNptL1FnxD1FdqAX6sIlnYt+j5IjnNopOoH8QTg1SamxSUkM2ac7bY6KONCkHVQK5xAjxKpUvesykYEvPEmpFhApbYSBpG7b2kghohdz1UGlr+WYvoRyox2AnPxsHBCNhbBI7JqcaaMEqAKTm/wwQDzQ10AD87AdbaEy14a23yCAmSFQ7Fi3inz5y9zwQZsw9e/wQKBHgFvGjfhW+3q3xpppH83E3OzN7Hp5jnB+CZi54KLxzkRvi2ZNB0mCySho7YeOdsBpJeKQQvuPbjzqsVfszDtK8EJop5T7n7hkt7H2aN92tkgamw6Tw=" # encrypted value of your token

#script:
  # the following command line builds the project, runs the tests with coverage and then execute the SonarCloud analysis
#  - sonar-scanner